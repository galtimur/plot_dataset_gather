## Creating dataset

...

2. generate_tasks_by_GPT.py - generate tasks for drawing the plots. Input - plot.py, plot(s).png, data_descr.txt. Input is taken from manually validated dataset (dataset_valid_step_1)
output results to the jsonl file, storing raw responses
3. process_step_3_gather_dps.py - processes GPT responses and generates final dataset that contains
 ["plot.py", "data_descr.txt", "data.csv", "plot_original.py", "task.json", "plot(s).png"]

## Benchmarking

1. plot_generation_GPT.py - generate plotting code by GPT for datapoints of our datset. Task and data is presented in the dataset.
Stores the result in `gpt_plots_responses.jsonl`
2. process_generated_plotting_responses.py - takes code generated by LLM and draws the plots. Stores results in `gpt_plots_results.json`.
Each image stores as a base64 encoded png.
3. benchmark_results.py - analyze the generated plots.
4. present_bench_results.py - post generated plots and scores to the docx file.